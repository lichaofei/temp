<?php
  
/**
 * @file
 * Functions to support theming in the FontFolio theme.
 */
use Drupal\Component\Utility\String;
use Drupal\Component\Utility\Xss;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;


/**
 * Implements hook_process_HOOK() for page.tpl.php.
 */
function fontfolio_preprocess_page(&$variables) {
  // Make FontFolio theme settings into insertable variables.
  $social['facebook'] = theme_get_setting('facebook');
  $social['twitter']  = theme_get_setting('twitter');
  $social['plus']     = theme_get_setting('plus');
  $social['dribble']  = theme_get_setting('dribble');
  $variables['social_links'] = $social;
  /*
  $options['html'] = TRUE;
  foreach ($social as $network => $network_url) {
    if ($value != '') {
      // dpm($value);
      $imgvariables['uri'] = drupal_get_path('theme', 'fontfolio') . '/images/' . $key . '-icon.png';
      $imgvariables['attributes']['class'] = array($key);
      if ($key == 'plus') {
        $key = 'Google+';
      }
      $imgvariables['alt'] = t("@site_name's at @social_network", array(
        '@social_network' => $key,
        '@site_name' => $variables['site_name'],
      ));
     // dpm($imgvariables);
     $icon_img = array(
      '#theme' => 'image',
      '#path' => $imgvariables['uri'],
      '#attributes' => array(
        'alt' => $image['ImageAlt'],
        'title' => $image['ImageTitle'],
        'class' => $imgvariables['attributes']['class'],
      ),
    );
      $icon = render($icon_img);
     // dpm($icon);
      //$variables['social_links'] .= Drupal::l($icon, $value, $options);
      //$variables['social_links'] .= Drupal::l($icon, $value, $options);
    }
  }
  */

  // Show page title on taxonomy term pages?
  // replace d7 arg(). After: @see https://www.drupal.org/node/2274705
  $path_args = explode('/', current_path());
  if ( $path_args[0] == 'taxonomy' && $path_args[1] == 'term' && theme_get_setting('hide_page_tile') == 1) {
    $variables['title'] = '';
  }  
  
  $variables['social_networks'] = array(
      '#theme' => 'social_networks',
      '#name' => t('Chickado'),
      '#attributes' => [
        'id' => 'best-sandwich',
        'style' => 'float: left;',
        'class' => ['left', 'clearfix', 'ff8_sandwich'],
      ],
      '#bread' => t('Sourdough'),
      '#cheese' => t('GruyÃ¨re'),
      '#veggies' => [
        t('Avocado'),
        t('Red onion'),
        t('Romaine'),
      ],
      '#protein' => t('Chicken'),
      '#condiments' => [
        t('Mayo'),
        t('Dijon'),
      ],
    );
    
    _fontfolio_process_page($vars);
}


/**
 * Implements theme_menu_tree().
 */
function fontfolio_menu_tree($variables) {
  return '<ul class="menu clearfix">' . $variables['tree'] . '</ul>';
}


/**
 * Implements HOOK_form_alter()
 *
 * For search form styling.
 */
function fontfolio_form_alter(&$form, &$form_state, $form_id) {
  // Alter Search form
  if ($form_id == 'search_block_form') {
    // Change the text on the label element.
    $form['keys']['#title'] = t('Search');
    // Toggle label visibilty.
    $form['keys']['#title_display'] = 'invisible';
    // Set a placeholder text.
    // default_value onfocus/Blurr behaviour.
    $form['keys']['#attributes']['placeholder'] = t('Search');
    // Submit Button
    $form['actions']['submit'] = array(
      '#type' => 'image_button',
      '#src' => file_create_url(drupal_get_path('theme', 'fontfolio') . '/images/search-icon.png' ),
    );
    $form['actions']['submit']['#attributes']['class'][] = 'search_icon';
  }
}


/**
 * Implements hook_preprocess_HOOK() for node.tpl.php.
 */
function fontfolio_preprocess_node(&$vars) {
  // debug only one node.
  //static $i = 1; if (1 == $i) {  dpm($vars['attributes']);   }   $i++;
  
  // Instead of D7 use of arg().
  $path_args = explode('/', current_path());
  
  if ($vars['view_mode'] == 'full' && node_is_page($vars['node'])) {
    $vars['attributes']['class'][] = 'node-full';
  }
  else {
    // We need to distinguish the first node on front page teasers.
    // So we count the nodes for each teasers page request.
    static $numbered = 1;
    // Initialize default fonfolio node teaser class to 'post-box'.
    // 'post-box' class styles the smaller node boxes on typical FontFolio
    // teaser lists.
    $teaser_box_type = 'post-box';
    
    // FontFolio has different way to style node teasers if presented as part
    // of default blog teasers list. We recognize such list if its first URL 
    // parameter is "blog".
    // But we dont want to use this style if blog displayed at site frontpage.
    // So we set different class for Blog teaser.
    if ( $path_args[0] == 'blog' && !($vars['is_front'])) {
      $teaser_box_type = 'blog-box';
    }
    
    $vars['attributes']['class'][] = $vars['zebra'];
    
    // Set first teaser node classes to allow the bigger dimentions for first teaser.
    if ($numbered == 1) {
      $vars['attributes']['class'][] = 'first';
      $numbered++;
      if ($vars['is_front']) {
        $teaser_box_type = 'big-post-box';
      }
    }

    $vars['attributes']['class'][] = $teaser_box_type;
  }
}


/**
 * Temporary helper function that use code originally created for hook_process_HOOK().
 */
 function _fontfolio_process_page(&$variables) {
  $site_config = \Drupal::config('system.site');
  // Always print the site name and slogan, but if they are toggled off, we'll
  // just hide them visually.
  $variables['hide_site_name']   = theme_get_setting('toggle_name') ? FALSE : TRUE;
  $variables['hide_site_slogan'] = theme_get_setting('toggle_slogan') ? FALSE : TRUE;
  if ($variables['hide_site_name']) {
    // If toggle_name is FALSE, the site_name will be empty, so we rebuild it.
    //$variables['site_name'] = check_plain($site_config->get('name'));
    $variables['site_name'] = String::checkPlain($site_config->get('name'));
  }
  if ($variables['hide_site_slogan']) {
    // If toggle_site_slogan is FALSE, the site_slogan will be empty, so we rebuild it.
    //$variables['site_slogan'] = filter_xss_admin($site_config->get('slogan'));
    $variables['site_slogan'] = Xss::filterAdmin($site_config->get('slogan'));
  }
  // Since the title and the shortcut link are both block level elements,
  // positioning them next to each other is much simpler with a wrapper div.
  if (!empty($variables['title_suffix']['add_or_remove_shortcut']) && $variables['title']) {
    // Add a wrapper div using the title_prefix and title_suffix render elements.
    $variables['title_prefix']['shortcut_wrapper'] = array(
      '#markup' => '<div class="shortcut-wrapper clearfix">',
      '#weight' => 100,
    );
    $variables['title_suffix']['shortcut_wrapper'] = array(
      '#markup' => '</div>',
      '#weight' => -99,
    );
    // Make sure the shortcut link is the first item in title_suffix.
    $variables['title_suffix']['add_or_remove_shortcut']['#weight'] = -100;
  }
}
